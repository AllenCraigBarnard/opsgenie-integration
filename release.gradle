apply from: 's3.gradle'

def getIncreasedMinor(String version) {
    String[] versions = version.split('\\.')
    int minor = Integer.valueOf(versions[2]) + 1
    return versions[0] + "." + versions[1] + "." + minor
}

def getIncreasedMajor(String version) {
    String[] versions = version.split("\\.")
    int major = Integer.valueOf(versions[1]) + 1
    return versions[0] + "." + major + ".0"
}

def increaseVersion(String type) {
    def args
    if(!project.hasProperty('args')) {
        println "You must add integrations e.g -Pargs=redmine,nagios"
    }

    args = project.args.split(',')
    if(args.contains('client') || args.contains('all')) {
        increseAll(type)
        return
    }

    Properties versions = project.ext.versions
    for(def arg : args) {
        String oldVersion = versions.getProperty(arg)
        if(oldVersion == null) {
            throw new IllegalArgumentException("Integration ${arg} does not exist!")
        }
        String newVersion = type.equals("minor") ? getIncreasedMinor(oldVersion) : getIncreasedMajor(oldVersion)
        versions.setProperty(arg, newVersion)
    }
    copy {
        from "${projectDir}/release.properties"
        into "${projectDir}"
        rename 'release.properties', 'release.old.properties'
    }
    println "${type} versions icreased for ${args}"
    versions.store(new FileOutputStream("${projectDir}/version.properties"), "")
}

def increseAll(String type) {
    Properties versions = project.ext.versions
    for (String integration : versions.stringPropertyNames()) {
        String oldVersion = versions.getProperty(integration)
        String newVersion = type.equals('minor') ? getIncreasedMinor(oldVersion) : getIncreasedMajor(oldVersion)
        println integration
        versions.setProperty(integration, newVersion)
    }
    copy {
        from "${projectDir}/version.properties"
        into "${projectDir}"
        rename 'version.properties', 'version.old.properties'
    }
    println "All ${type} versions icreased!"
    versions.store(new FileOutputStream("${projectDir}/version.properties"), "")
}

task newMinor << {
    increaseVersion('minor')
}

task newMajor << {
    increaseVersion('major')
}

task removeSnapshot << {

}

def getDownloadsTemplate() {
    def downloadsFile
    if(project.hasProperty("downloads")) {
        downloadsFile = project.downloads
    } else {
        downloadsFile = "${project.projectDir}/downloads.template.properties"
    }
    return downloadsFile
}

def generateDownloadsProperties() {
    copy {
        from getDownloadsTemplate()
        filter {
            it.replace('[[client]]', project.ext.versions.getProperty('client'))
                    .replace('[[splunk]]', project.ext.versions.getProperty('splunk'))
                    .replace('[[smarts]]', project.ext.versions.getProperty('smarts'))
                    .replace('[[opennms]]', project.ext.versions.getProperty('opennms'))
                    .replace('[[nagios]]', project.ext.versions.getProperty('nagios'))
                    .replace('[[nagiosxi]]', project.ext.versions.getProperty('nagiosxi'))
                    .replace('[[icinga]]', project.ext.versions.getProperty('icinga'))
                    .replace('[[redmine]]', project.ext.versions.getProperty('redmine'))
                    .replace('[[netcool]]', project.ext.versions.getProperty('netcool'))
                    .replace('[[zabbix]]', project.ext.versions.getProperty('zabbix'))
                    .replace('[[zenoss]]', project.ext.versions.getProperty('zenoss'))
        }
        into "${buildDir}/distributions"
        rename "downloads.template.properties", "downloads.properties"
    }
}

def isReleaseForAll() {
    def args = project.args.toString().split('\\,')
    return args.contains('all') || args.contains('client')
}

def generateReleaseTasks() {
    def tasks = ['removeSnapshot', 'clean']
    if(!project.hasProperty('args')) {
        throw new IllegalArgumentException("Please give integrations as args to release! E.g. gradle release -Pargs=nagios,redmine")
    }

    def args = project.args.toString().split('\\,')

    if(isReleaseForAll()) {
        tasks << 'packageAll'
        tasks << 'packageSdk'
    } else {
        for(String integration : args) {
            String taskName = "package${Character.toUpperCase(integration.charAt(0))}${integration.substring(1)}"
            tasks << taskName
        }
    }
    return tasks
}

task release(type: GradleBuild ) {
    doFirst{
        generateDownloadsProperties()
        tasks = generateReleaseTasks();
    }
    doLast{
        createDownloadBucketIfNonExist()
        uploadDownloadsPropertiesToS3()
        uploadIntegrationsToS3()
        if(isReleaseForAll()) {
            uploadJavaDocToS3()
            uploadClientPackagesToS3()
            uploadArchives()
        }
    }
}