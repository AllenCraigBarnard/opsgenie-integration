apply from: 's3.gradle'

def getIncreasedMinor(String version) {
    String[] versions = version.split('\\.')
    int minor = Integer.valueOf(versions[2]) + 1
    return versions[0] + "." + versions[1] + "." + minor
}

def getIncreasedMajor(String version) {
    String[] versions = version.split("\\.")
    int major = Integer.valueOf(versions[1]) + 1
    return versions[0] + "." + major + ".0"
}

def increaseVersion(String type) {
    def args
    if(!project.hasProperty('args')) {
        println "You must add integrations e.g -Pargs=redmine,nagios"
    }

    args = project.args.split(',')
    if(args.contains('client') || args.contains('all')) {
        increseAll(type)
        return
    }

    Properties versions = project.ext.versions
    for(def arg : args) {
        String oldVersion = versions.getProperty(arg)
        if(oldVersion == null) {
            throw new IllegalArgumentException("Integration ${arg} does not exist!")
        }
        String newVersion = type.equals("minor") ? getIncreasedMinor(oldVersion) : getIncreasedMajor(oldVersion)
        versions.setProperty(arg, newVersion)
    }
    copy {
        from "${projectDir}/release.properties"
        into "${projectDir}"
        rename 'release.properties', 'release.old.properties'
    }
    println "${type} versions icreased for ${args}"
    versions.store(new FileOutputStream("${projectDir}/version.properties"), "")
}

def increseAll(String type) {
    Properties versions = project.ext.versions
    for (String integration : versions.stringPropertyNames()) {
        String oldVersion = versions.getProperty(integration)
        String newVersion = type.equals('minor') ? getIncreasedMinor(oldVersion) : getIncreasedMajor(oldVersion)
        println integration
        versions.setProperty(integration, newVersion)
    }
    copy {
        from "${projectDir}/version.properties"
        into "${projectDir}"
        rename 'release.properties', 'version.old.properties'
    }
    println "All ${type} versions icreased!"
    versions.store(new FileOutputStream("${projectDir}/version.properties"), "")
}

task newMinor << {
    increaseVersion('minor')
}

task newMajor << {
    increaseVersion('major')
}

task removeSnapshot << {

}

task release() << {
    def tasksToExecute = ['removeSnapshot', 'clean']
    if(!project.hasProperty('args')) {
        throw new IllegalArgumentException("Please give integrations as args to release! E.g. gradle release -Pargs=nagios,redmine")
    }

    def args = project.args.toString().split('\\,')

    if(args.contains('all') || args.contains('client')) {
        tasksToExecute << 'packageAll'
    } else {
        for(String integration : args) {
            String taskName = "package${Character.toUpperCase(integration.charAt(0))}${integration.substring(1)}"
            tasksToExecute << taskName
        }
    }
    tasksToExecute << 'uploadS3'
    tasksToExecute << 'sdk:uploadArchives'
    project.ext.suffixVersion = ''
    task doRelease(type: org.gradle.api.tasks.GradleBuild) {
        tasks = tasksToExecute
    }
    tasks.doRelease.execute()

}

