task prepareVCSA() << {
    def destination = "${project.buildDir}/vcsa"
    copy {
        from "${project.buildDir}/opsgenie-integration"
        into "${destination}/opsgenie-integration"
    }

    copy {
        from "${project.projectDir}/vcsa/vcsa/vcsa2opsgenie.go"
        into "${destination}/vcsa"
    }

    copy {
        from "${project.projectDir}/vcsa/vcsa/vcsa2opsgenie"
        into "${destination}/vcsa"
    }

    copy {
        from "${project.projectDir}/vcsa/common/opsgenie-integration.conf"
        into "${destination}/opsgenie-integration/conf"
    }
}

def buildRpmForVCSA(String sourceDir, String name, String descrpt, Map fileMappingInput, Map configFilesInput) {
    def taskName = "generateRpm${sourceDir}"

    def configFiles = [:]
    configFiles.putAll(configFilesInput)
    def fileMapping = [:]
    fileMapping.putAll(fileMappingInput)

    task "${taskName}"(type: Rpm) {
        def packageVersion = project.ext.versions.getProperty(sourceDir) + project.ext.versionSuffix

        packageName = name
        description = descrpt
        summary = descrpt
        packageDescription = descrpt + ". Please see doc for details: https://www.opsgenie.com/docs/"
        version = packageVersion.replace("-", ".");
        os = LINUX
        user = 'root'

        release = '1.all'
        packager = "ifountain"
        vendor = "opsgenie"
        url = "https://www.opsgenie.com"
        license = "Apache License 2.0"
        buildHost = "repo.opsgenie.com"
        packageGroup = "System Administration Tools"


        configFiles.put("${project.buildDir}/${sourceDir}/opsgenie-integration/conf/opsgenie-integration.conf", 'etc/opsgenie/conf')

        for (def source : configFiles.keySet()) {
            def dest = configFiles.get(source)
            logger.info("config " + source + " - " + dest)
            from(source) {
                fileType CONFIG | NOREPLACE
                into(dest)
            }
        }

        for(def source : fileMapping.keySet()) {
            def dest = fileMapping.get(source)
            logger.info(source + " - " + dest)
            from(source) {
                into(dest)
            }
        }

        preInstall file("${project.projectDir}/vcsa/native/ogBefore.sh")
        postInstall file("${project.projectDir}/vcsa/native/ogAfter.sh")
    }

    tasks[taskName].execute()
}

task packageVCSAOS(dependsOn: 'prepareVCSA') << {

    def fileMapping = [
            "${project.projectDir}/vcsa/vcsa/vcsa2opsgenie"   : "etc/opsgenie",
            "${project.projectDir}/vcsa/vcsa/vcsa2opsgenie.go": "etc/opsgenie"
    ]

    buildRpmForVCSA('vcsa', 'opsgenie-vcsa', 'OpsGenie - VCSA integration files',
            fileMapping, [:])

}

task packageVCSA(dependsOn: 'packageVCSAOS')
