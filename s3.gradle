buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.amazonaws:aws-java-sdk:1.7.8.1'
    }
}

import com.amazonaws.*
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3
import com.amazonaws.services.s3.AmazonS3Client
import com.amazonaws.services.s3.model.*

def getUploadOptions() {
    Properties properties = new Properties();
    properties.load(new FileInputStream("${projectDir}/uploadOptions.properties"))
    return properties
}

def getAWSClient() {
    def props = getUploadOptions()

    def amazonAccessKey = props.getProperty('amazonAccessKey')
    def amazonSecretKey = props.getProperty('amazonSecretKey')
    def amazonConnectionTimeout = Integer.valueOf(props.getProperty('amazonConnectionTimeout'))
    def amazonMaxConnections = Integer.valueOf(props.getProperty('amazonMaxConnections'))
    def amazonMaxErrorRetry = Integer.valueOf(props.getProperty('amazonMaxErrorRetry'))

    AWSCredentials awsCredentials = new BasicAWSCredentials(amazonAccessKey, amazonSecretKey)
    ClientConfiguration clientConfiguration = new ClientConfiguration()
    clientConfiguration.setConnectionTimeout(amazonConnectionTimeout);
    clientConfiguration.setMaxConnections(amazonMaxConnections);
    clientConfiguration.setMaxErrorRetry(amazonMaxErrorRetry);
    AmazonS3 client = new AmazonS3Client(awsCredentials, clientConfiguration)
    return client
}

task createDownloadBucketIfNonExist << {
    def client = getAWSClient()
    def props = getUploadOptions()
    def downloadsBucket = props.getProperty('amazonDownloadsBucket')
    def buckets = client.listBuckets();
    def downloadBucketExists = buckets.find {it.getName() == downloadsBucket}

    if (!downloadBucketExists) {
        client.createBucket(downloadsBucket)
    }
}

task uploadJavaDocToS3(dependsOn: ['sdk:javadoc']) << {

    def client = getAWSClient()
    def props = getUploadOptions()
    def buckets = client.listBuckets();
    def javadocBucket = props.getProperty('amazonJavadocBucket')
    def javadocBucketExists = buckets.find {it.getName() == javadocBucket}

    println '[Package] Started to upload JavaDoc'
    if (javadocBucketExists) {
        logger.info("Bucket [" + javadocBucket + "] deleted")
        ObjectListing objects = client.listObjects(new ListObjectsRequest().withBucketName(javadocBucket));
        List<S3ObjectSummary> objectSummaries = objects.getObjectSummaries();
        for (S3ObjectSummary next : objectSummaries) {
            client.deleteObject(new DeleteObjectRequest(next.getBucketName(), next.getKey()));
        }
        println("Bucket [" + javadocBucket + "] deleted")
        client.deleteBucket(javadocBucket);
    }
    client.createBucket(javadocBucket)
    println("Bucket [" + javadocBucket + "] created")
    client.setBucketWebsiteConfiguration(javadocBucket, new BucketWebsiteConfiguration("index.html"))
    FileTree javadoc = fileTree(dir: "${project(':sdk').buildDir}/docs/javadoc")
    javadoc.each { File file ->
        logger.info("Uploading " + file.getAbsolutePath())
        def fileName = file.getCanonicalPath().replace("${project(':sdk').buildDir}/docs/javadoc/", '')
        PutObjectRequest request = new PutObjectRequest(javadocBucket, fileName, file)
        request.setCannedAcl(CannedAccessControlList.PublicRead)
        client.putObject(request)
    }
    println '[Package] Upload success'
}

task uploadSdkJarToS3(dependsOn: ['createDownloadBucketIfNonExist','sdk:jar', 'sdk:shadowJar']) << {
    def client = getAWSClient()
    def props = getUploadOptions()
    def downloadsBucket = props.getProperty('amazonDownloadsBucket')

    FileTree sdkJars = fileTree(dir: "${project(':sdk').buildDir}/libs")
    sdkJars.include '*.jar'
    println '[Package] Started to upload sdk jars'
    sdkJars.each { File file ->
        logger.info("Uploading " + file.getAbsolutePath())
        PutObjectRequest request = new PutObjectRequest(downloadsBucket, "client/${file.getName()}", file)
        request.setCannedAcl(CannedAccessControlList.PublicRead)
        client.putObject(request)
    }
}

task uploadClientPackagesToS3(dependsOn: ['createDownloadBucketIfNonExist','package:packageAll']) << {
    def client = getAWSClient()
    def props = getUploadOptions()
    def downloadsBucket = props.getProperty('amazonDownloadsBucket')

    println '[Package] Started to upload packages'
    FileTree packages = fileTree(dir: "${project(':package').buildDir}/distributions")
    packages.include '*.zip'
    packages.include '*.deb'
    packages.include '*.rpm'

    packages.each { File file ->
        logger.info("Uploading " + file.getAbsolutePath())
        PutObjectRequest request = new PutObjectRequest(downloadsBucket, "client/${file.getName()}", file)
        request.setCannedAcl(CannedAccessControlList.PublicRead)
        client.putObject(request)
    }
}

task uploadIntegrationsToS3(dependsOn: 'createDownloadBucketIfNonExist') << {
    def client = getAWSClient()
    def props = getUploadOptions()
    def downloadsBucket = props.getProperty('amazonDownloadsBucket')

    FileTree integrations = fileTree(dir: "${buildDir}/distributions")
    integrations.include '*.zip'
    integrations.include '*.deb'
    integrations.include '*.rpm'
    println '[Package] Started to upload integration packages'
    integrations.each { File file ->
        logger.info("Uploading " + file.getAbsolutePath())
        PutObjectRequest request = new PutObjectRequest(downloadsBucket, "client/${file.getName()}", file)
        request.setCannedAcl(CannedAccessControlList.PublicRead)
        client.putObject(request)
    }
}
